<!DOCTYPE html>
<html lang="<%= props.siteInfo.lang %> ">

<head>
    <meta charSet="UTF-8" />
    <meta httpEquiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta httpEquiv="X-UA-Compatible" content="IE=Edge" />
    <meta name="viewport"
        content="user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, width=device-width" />
    <title>
        <%= props.siteInfo.siteName %>
    </title>
    <link rel="stylesheet" href="/css/app.css">
    <script src="/js/js.js"></script>
</head>

<body>
  <%- include("./components/header.ejs") %>

    <div class="cont-fluid">
        <div class="row">
            <div class="col-2">
                <%- include("components/navigationBar")%>
            </div>
            <style>
                label[aria-required="true"]:after {
                    color: #e32;
                    content: ' *';
                    display: inline;
                }

                label {
                    font-size: 1.8rem;
                }
            </style>
            <div class="col-8">
                <label aria-required="true" for="title">Title: </label>
                <input id="title" maxlength="120" minlength="16"
                    style="border: 1px black solid; width: 100%;font-size: 32px;padding: 10px;" type="text">
                <label aria-required="true" for="slug">Slug: </label>
                <div style="position: relative;margin: 10px 0;height: 30px;">
                    <input id="slug" maxlength="120" minlength="16"
                        style="position: absolute;border: 1px black solid; width: 100%;font-size: 2.2rem;padding: 2px;"
                        type="text">
                    <svg id="slugGenerate" style="position:absolute;cursor:pointer;right:8px;top:8px;" width="1.4em"
                        height="1.4em" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd"
                            d="M15.681 2.804A9.64 9.64 0 0011.818 2C6.398 2 2 6.48 2 12c0 5.521 4.397 10 9.818 10 2.03 0 4.011-.641 5.67-1.835a9.987 9.987 0 003.589-4.831 1.117 1.117 0 00-.664-1.418 1.086 1.086 0 00-1.393.676 7.769 7.769 0 01-2.792 3.758 7.546 7.546 0 01-4.41 1.428V4.222h.002a7.492 7.492 0 013.003.625 7.61 7.61 0 012.5 1.762l.464.551-2.986 3.042a.186.186 0 00.129.316H22V3.317a.188.188 0 00-.112-.172.179.179 0 00-.199.04l-2.355 2.4-.394-.468-.02-.02a9.791 9.791 0 00-3.239-2.293zm-3.863 1.418V2v2.222zm0 0v15.556c-4.216 0-7.636-3.484-7.636-7.778s3.42-7.777 7.636-7.778z"
                            fill="#212134"></path>
                    </svg>
                </div>
                <label aria-required="true" for="description">Description: </label>
                <textarea id="description" maxlength="520" minlength="16"
                    style="border: 1px black solid; width: 100%;min-height: 100px;padding: 10px;font-size: 2.2rem;"></textarea>
                <label aria-required="true" for="brief">Brief: </label>
                <textarea id="brief" maxlength="520" minlength="16"
                    style="border: 1px black solid; width: 100%;min-height: 60px;padding: 10px;font-size: 2rem;"></textarea>
                <div id="post">
                </div>
                <div>
                    <input type="checkbox" name="use_tts" id="use_tts">
                    <label for="use_tts">Text to speech: </label>
                </div>
                <textarea style="outline: 1px solid #000;width: 100%;min-height: 300px;display: none;" name="tts"
                    id="tts"></textarea>

            </div>
            <div class="col-2">
                <label aria-required="true" for="thumbImg">Thumb img :</label>
                <div id="dropbox" style="padding: 15px 5px;border: 1px solid #000;margin-bottom: 10px;">
                    <input required accept="image/*" type="file" name="thumbImg" id="thumbImg">
                    <p style="text-align: center;">Drop image here ...</p>
                    <div id="preview"></div>
                </div>
                <label for="thumbtype"> Thumb type :</label>
                <select style="width: 200px;padding: 5px;margin: 5px;border: 1px solid black;" name="thumbType"
                    id="thumbType">
                    <% props.siteInfo.thumbTypes.forEach((type, index)=> { %>
                        <option value="<%=type %>">
                            <%= type %>
                        </option>
                        <%})%>
                </select>
                <label style="display: block;" for="lang"> Lang :</label>
                <select style="width: 200px;padding: 5px;margin: 5px;border: 1px solid black;display: block;"
                    name="lang" id="lang">
                    <% props.siteInfo.langSupport.forEach((lang, index)=> { %>
                        <option value="<%=lang.code %>">
                            <%= lang.name %>
                        </option>
                        <%})%>
                </select>
                <label for="category" style="margin: 5px;display: block;" name="category">Category: </label>
                <select id="category" aria-placeholder="select category" required
                    style="width: 200px;padding: 5px;display: block;margin: 5px;border: 1px solid black;"
                    name="catefories" id="catefories">
                    <% props.categories.forEach((category, index)=> { %>
                        <% if(category.type=="category" ){%>
                            <option value="<%=category._id%>">
                                <%=category.name%>
                            </option>
                            <% sub=props.categories.filter(cate=> {
                                return ((cate.parent == category._id.toString())&&(cate.type=="sub" ))
                                })%>
                                <% if(sub.length!=0) {%>
                                    <optgroup label="<%= category.name %>">
                                        <% sub.forEach((subcate, index)=>{%>
                                            <option value="<%=subcate._id%>">
                                                <%= subcate.name%>
                                            </option>
                                            <%}) %>
                                    </optgroup>
                                <% } %>
                            <% } %>
                        <% }) %>
                 
                </select>
                <label style="display: block;margin: 5px;" for="tags">Add tag: </label>
                <input style="outline: 1px solid #000;padding: 5px;margin: 5px;display: block;" type="text"
                    name="tagInput" id="tagInput">
                <input style="padding: 5px;margin: 5px;display: block;" type="button" value="Add tag"
                    id="add_tag_button">
                <div id="tag_box" style="font-size: 1.8rem;">
                </div>
                <label style="margin: 5px;" for="status">Status: </label>
                <select name="status" id="status" style="font-size: 1.6rem;outline: 1px solid #000;">
                    <option value="public">Public</option>
                    <option value="hidden">Hidden</option>
                    <option value="schedule">schedule</option>
                </select>
                <input style="display: block;" disabled type="time" name="time" id="time">
                <input style="display: block;" disabled type="date" name="date" id="date">
                <button id="done" style="padding: 10px 20px;cursor: pointer;display: block;margin-top: 15px;"
                    type="submit"><strong>Done</strong></button>
            </div>
        </div>
    </div>

</body>
<style>
    .ck-content {
        min-height: 750px;
    }
</style>
<script src="/ckeditor5/build/ckeditor.js"></script>
<script>ClassicEditor
        .create(document.querySelector('#post'), {
            licenseKey: '',
        })
        .then(editor => {
            window.editor = editor;
        })
        .catch(error => {
            console.error('Oops, something went wrong!');
            console.warn('Build id: bqzh7awi765r-g5lhyh2zcu4q');
            console.error(error);
        });
    class MyUploadAdapter {
        constructor(loader) {
            this.loader = loader;
        }
        upload() {
            return this.loader.file
                .then(file => new Promise((resolve, reject) => {
                    var fd = new FormData()
                    fd.append("name", file.name)
                    fd.append("photo", file)
                    fetch("/media/upload",
                        {
                            method: "post",
                            body: fd,
                            headers: {
                                'Accept': 'application/json',
                            }
                        }
                    ).then(function (res) {
                        if (!res.ok) {
                            reject("connection error :" + res.status)
                        }
                        return res.json()
                    }).then(function (data) {
                        if (data.error) {
                            reject("upload image error" + data.message);
                            return
                        }
                        resolve(data)
                    })
                }))
        }
    }
    window.addEventListener("DOMContentLoaded", function (ev) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            return new MyUploadAdapter(loader);
        };
    })
    var date1 = new Date()
    document.getElementById("time").value = String(date1.getHours()).padStart(2, '0') + ':' + String(date1.getMinutes()).padStart(2, '0')
    document.getElementById("date").value = date1.getFullYear() + "-" + String(date1.getMonth() + 1).padStart(2, '0') + '-' + String(date1.getDate()).padStart(2, '0')
    var articleStatus = document.getElementById("status")
    articleStatus.addEventListener("change", function (ev) {
        if (articleStatus.value === "schedule") {
            document.getElementById("time").removeAttribute("disabled")
            document.getElementById("date").removeAttribute("disabled")
        } else {
            document.getElementById("time").setAttribute("disabled", '')
            document.getElementById("date").setAttribute("disabled", '')
        }
    })
    var tags = []
    function textToTag(tag) {
        if (typeof tag !== "string") {
            return false
        }
        tag = tag.toLowerCase();
        tag = tag.replace(/á|à|ả|ạ|ã|ă|ắ|ằ|ẳ|ẵ|ặ|â|ấ|ầ|ẩ|ẫ|ậ/gi, 'a');
        tag = tag.replace(/é|è|ẻ|ẽ|ẹ|ê|ế|ề|ể|ễ|ệ/gi, 'e');
        tag = tag.replace(/i|í|ì|ỉ|ĩ|ị/gi, 'i');
        tag = tag.replace(/ó|ò|ỏ|õ|ọ|ô|ố|ồ|ổ|ỗ|ộ|ơ|ớ|ờ|ở|ỡ|ợ/gi, 'o');
        tag = tag.replace(/ú|ù|ủ|ũ|ụ|ư|ứ|ừ|ử|ữ|ự/gi, 'u');
        tag = tag.replace(/ý|ỳ|ỷ|ỹ|ỵ/gi, 'y');
        tag = tag.replace(/đ/gi, 'd');
        tag = tag.replace(/\`|\~|\!|\@|\#|\||\$|\%|\^|\&|\*|\(|\)|\+|\=|\,|\.|\/|\?|\>|\<|\'|\"|\:|\;|_/gi, '');
        tag = tag.replace(/ /gi, "");
        tag = tag.replace(/\-\-\-\-\-/gi, '');
        tag = tag.replace(/\-\-\-\-/gi, '');
        tag = tag.replace(/\-\-\-/gi, '');
        tag = tag.replace(/\-\-/gi, '');
        tag = tag.replace(/-/gi, '');
        tag = '@' + tag + '@';
        tag = tag.replace(/\@\-|\-\@|\@/gi, '');
        return tag;
    }
    var tag_box = document.getElementById("tag_box")
    var add_tag_button = document.getElementById("add_tag_button")
    document.getElementById("tagInput").addEventListener('keyup', function onEvent(e) {
        if (e.keyCode === 13) {
            addtag()
        }
    });
    add_tag_button.addEventListener("click", addtag)
    function addtag() {
        var taginput = document.getElementById("tagInput")
        if (taginput.value === '') {
            return
        }
        var tag = textToTag(taginput.value)
        taginput.value = ""
        tags.push(tag)
        var div = document.createElement("div")
        div.style = "outline:1px solid #000;margin:5px;cursor:pointer;"
        div.innerHTML = `<span style="padding: 5px;">#${tag}</span>
                        <span style="position: absolute; right: 12px;">&times;</span>`
        div.addEventListener("click", function (ev) {
            div.remove()
            tags = tags.filter(function (value, i, arr) {
                return value !== tag
            })
        })
        tag_box.appendChild(div)
    }
    const checkbox = document.getElementById('use_tts')
    checkbox.addEventListener('change', (event) => {
        if (event.currentTarget.checked) {
            document.getElementById('tts').style.display = 'block'
        } else {
            document.getElementById('tts').style.display = "none"
        }
    })

    var dropbox = document.getElementById("dropbox")
    dropbox.addEventListener("dragenter", dragenter, false);
    dropbox.addEventListener("dragover", dragover, false);
    dropbox.addEventListener("drop", drop, false);
    function dragenter(e) {
        e.stopPropagation();
        e.preventDefault();
    }

    function dragover(e) {
        preview.innerHTML = ""
        e.stopPropagation();
        e.preventDefault();
    }
    function drop(e) {
        e.stopPropagation();
        e.preventDefault();
        const dt = e.dataTransfer;
        const files = dt.files;
        handleFiles(files);
    }

    var thumbImg = document.getElementById("thumbImg")
    var preview = document.getElementById("preview")

    thumbImg.addEventListener('change', function (ev) {
        if (thumbImg.files[0].size > 1024 * 300) {
            alert("thumb img < 300kb")
            return
        }
        while (preview.firstChild) {
            preview.removeChild(preview.firstChild);
        }
        var thumb = new FormData()
        thumb.append("thumb", thumbImg.files[0])

        fetch("/media/thumb-upload", {
            method: "post",
            body: thumb,
            headers: {
                'Accept': 'application/json'
            }
        }).then(function (res) {
            if (!res.ok) {
                throw new Error("submit err" + res.status)
            }
            return res.json()
        }).then(function (data) {
            if (data.error) {
                console.error(data.message);
                return
            }
            const list = document.createElement('ol');
            preview.appendChild(list);
            const listItem = document.createElement('li')
            const para = document.createElement('p');
            para.textContent = `File: ${thumbImg.files[0].name} || Filesize: ${(thumbImg.files[0].size / (1024)).toFixed(1)}kb.`;
            const image = document.createElement('img');
            image.src = URL.createObjectURL(thumbImg.files[0]);
            image.height = 122
            listItem.appendChild(image);
            listItem.appendChild(para);
            list.appendChild(listItem);
        })
    });


    window.addEventListener("DOMContentLoaded", function () {
        document.getElementById("done").addEventListener("click", function (event) {
            var articleFormData = new FormData()
            articleFormData.append('content', editor.getData())
            articleFormData.append("title", document.getElementById("title").value)
            articleFormData.append("slug", document.getElementById("slug").value)
            articleFormData.append("description", document.getElementById("description").value)
            articleFormData.append("brief", document.getElementById("brief").value)
            articleFormData.append("lang", document.getElementById("lang").value)
            articleFormData.append("category", document.getElementById("category").value)
            articleFormData.append("thumbImg", document.getElementById("thumbImg").files[0])
            articleFormData.append("thumbType", document.getElementById("thumbType").value)
            articleFormData.append("status", document.getElementById("status").value)
            articleFormData.append("date", document.getElementById("date").value)
            articleFormData.append("time", document.getElementById("time").value)
            articleFormData.append("tts", document.getElementById("tts").value || "")
            articleFormData.append("tag", tags.join(",")||'')
            fetch("/<%= props.admin_path %>/article/add", {
                method: "post",
                body: articleFormData,
                headers: {
                    'Accept': 'application/json'
                },
            }).then(function (res) {
                if (!res.ok) {
                    throw new Error("submit err" + res.status)
                }
                return res.json()
            }).then(function (data) {
                if (data.error) {
                    console.error(data.message);
                }
                console.log(data);
                createModal(data)
            })
        })
    })
    function generateSlug() {
        if (document.getElementById("slug").value.length < 10) {
            document.getElementById("slug").style.border = "3px solid red"
            return
        }
        fetch("/<%= props.admin_path %>/article/slug-generate", {
            method: 'post',
            body: JSON.stringify({
                slug: document.getElementById("slug").value
            }),
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
        }).then(function (res) {
            if (!res.ok) {
                throw new Error("slugGenerate err" + res.status)
            }
            return res.json()
        }).then(function (data) {
            console.log(data);
            if (data.error) {
                console.error(data.message);
                document.getElementById("slug").style.border = "3px solid red"
                return
            }
            document.getElementById("slug").value = data.slug
            document.getElementById("slug").style.border = "3px solid green"

        })
    }
    document.getElementById("slugGenerate").addEventListener('click', function (ev) {
        generateSlug()
    })
    document.getElementById("title").addEventListener('focusout', function (ev) {
        if (document.getElementById("title").value !== "") {
            document.getElementById("slug").value = textToSlug(document.getElementById("title").value)
            generateSlug()
        } else {
            document.getElementById("slug").value = ''
            document.getElementById("slug").style.border = "1px solid black"
        }
    })
    document.getElementById("slug").addEventListener("focusout", function (ev) {
        if (document.getElementById("slug").value !== "") {
            generateSlug()
        } else {
            document.getElementById("slug").value = textToSlug(document.getElementById("title").value)
            generateSlug()
        }
    })


    function textToSlug(slug) {
        if (typeof slug !== "string") {
            return false
        }
        slug = slug.toLowerCase();
        slug = slug.replace(/á|à|ả|ạ|ã|ă|ắ|ằ|ẳ|ẵ|ặ|â|ấ|ầ|ẩ|ẫ|ậ/gi, 'a');
        slug = slug.replace(/é|è|ẻ|ẽ|ẹ|ê|ế|ề|ể|ễ|ệ/gi, 'e');
        slug = slug.replace(/i|í|ì|ỉ|ĩ|ị/gi, 'i');
        slug = slug.replace(/ó|ò|ỏ|õ|ọ|ô|ố|ồ|ổ|ỗ|ộ|ơ|ớ|ờ|ở|ỡ|ợ/gi, 'o');
        slug = slug.replace(/ú|ù|ủ|ũ|ụ|ư|ứ|ừ|ử|ữ|ự/gi, 'u');
        slug = slug.replace(/ý|ỳ|ỷ|ỹ|ỵ/gi, 'y');
        slug = slug.replace(/đ/gi, 'd');
        slug = slug.replace(/\`|\~|\!|\@|\#|\||\$|\%|\^|\&|\*|\(|\)|\+|\=|\,|\.|\/|\?|\>|\<|\'|\"|\:|\;|_/gi, '');
        slug = slug.replace(/ /gi, "-");
        slug = slug.replace(/\-\-\-\-\-/gi, '-');
        slug = slug.replace(/\-\-\-\-/gi, '-');
        slug = slug.replace(/\-\-\-/gi, '-');
        slug = slug.replace(/\-\-/gi, '-');
        slug = '@' + slug + '@';
        slug = slug.replace(/\@\-|\-\@|\@/gi, '');
        return slug;
    }
</script>

</html>
